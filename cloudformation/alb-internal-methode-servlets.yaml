AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Internal application load balancer for Methode Servlets
Parameters:
  SecurityGroupIds:
    Type: CommaDelimitedList
    Description: Security Groups to attach load balancer
    Default: sg-15be656d,sg-e1875c99
  SubnetIds:
    Type: CommaDelimitedList
    Description: Public subnets to attach load balancer
    Default: subnet-cbbc0d82,subnet-3f3fcb64,subnet-a467cfc3
  VpcId:
    Type: String
    Description: >
      Optional - Specifies the ID of an existing VPC in which to launch
      your container instances.
    Default: vpc-729f2815
    AllowedPattern: "^(?:vpc-[0-9a-f]{8}|)$"
    ConstraintDescription: >
      VPC Id must begin with 'vpc-'
  TagDescription:
    Description: Tag detail for the Description
    Type: String
    Default: Internal ALB for Methode Servlets
  TagEnvironment:
    Description: Tag detail for the Environment
    Type: String
    Default: int
    AllowedValues:
      - 'd'
      - 't'
      - 'p'
      - 'int'
  TagTeamDL:
    Description: Tag detail for the TeamDL
    ConstraintDescription: There must be a valid email address for the TeamDL Topic
    Type: String
    AllowedPattern: ^([a-zA-Z0-9_\-\.]+)@([a-zA-Z0-9_\-\.]+)\.([a-zA-Z]{2,5})$
    Default: team.cms@ft.com
  TagSystemCode:
    Description: SystemCode
    Type: String
    Default: methode
  MethodeApp:
    Description: Methode Application Stack
    Type: String
    Default: wires
    AllowedValues:
      - 'wires'
      - 'staging'
      - 'archive'
Mappings:
  EnvMap:
    d:
      env: "dev"
    t:
      env: "test"
    p:
      env: "prod"
    int:
      env: "int"
Resources:
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
     LoadBalancerAttributes:
       - Key: deletion_protection.enabled
         Value: true
     Name: !Sub "${AWS::StackName}"
     Type: application
     Scheme: internal # or internet-facing
     Subnets: !Ref SubnetIds
     SecurityGroups: !Ref SecurityGroupIds
     Tags:
       -
         Key: Name
         Value: !Sub "methode-servlets-${AWS::StackName}"
       -
         Key: Description
         Value:
           Ref: TagDescription
       -
         Key: environment
         Value:
           Ref: TagEnvironment
       - Key: teamDL
         Value:
           Ref: TagTeamDL
       - Key: systemCode
         Value:
           Ref: TagSystemCode
  TargetGroupMIS:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
     Name: !Sub "TG-${AWS::StackName}-mis"
     Port: 8080
     Protocol: HTTP
     HealthCheckPath: /mis/actions/home
     HealthCheckProtocol: HTTP
     Matcher:
       HttpCode: '200'
     TargetGroupAttributes:
     - Key: deregistration_delay.timeout_seconds
       Value: '10'
     - Key: stickiness.enabled
       Value: true
     VpcId: !Ref VpcId
  TargetGroupRhelper:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
     Name: !Sub
      - TG-methode-rhelper-${App}-${Env}
      - { App: !Ref MethodeApp, Env: !FindInMap [ EnvMap, !Ref TagEnvironment, env ] }
     Port: 8080
     Protocol: HTTP
     HealthCheckPath: /rhelper/
     HealthCheckProtocol: HTTP
     HealthCheckIntervalSeconds: 10
     HealthCheckTimeoutSeconds: 5
     HealthyThresholdCount: 2
     UnhealthyThresholdCount: 5
     Matcher:
       HttpCode: '200'
     TargetGroupAttributes:
     - Key: deregistration_delay.timeout_seconds
       Value: '10'
     - Key: stickiness.enabled
       Value: true
     VpcId: !Ref VpcId
  TargetGroupCheckin:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
     Name: !Sub
      - TG-methode-checkin-${App}-${Env}
      - { App: !Ref MethodeApp, Env: !FindInMap [ EnvMap, !Ref TagEnvironment, env ] }
     Port: 8080
     Protocol: HTTP
     HealthCheckPath: /emcheckin/
     HealthCheckProtocol: HTTP
     HealthCheckIntervalSeconds: 10
     HealthCheckTimeoutSeconds: 5
     HealthyThresholdCount: 2
     UnhealthyThresholdCount: 5
     Matcher:
       HttpCode: '200'
     TargetGroupAttributes:
     - Key: deregistration_delay.timeout_seconds
       Value: '10'
     - Key: stickiness.enabled
       Value: true
     VpcId: !Ref VpcId
  TargetGroupPreview:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
     Name: !Sub
      - TG-methode-preview-${App}-${Env}
      - { App: !Ref MethodeApp, Env: !FindInMap [ EnvMap, !Ref TagEnvironment, env ] }
     Port: 8080
     Protocol: HTTP
     HealthCheckPath: /preview-jsp/standard/pages/healthcheck/healthcheck.html
     HealthCheckProtocol: HTTP
     HealthCheckIntervalSeconds: 10
     HealthCheckTimeoutSeconds: 5
     HealthyThresholdCount: 2
     UnhealthyThresholdCount: 5
     Matcher:
       HttpCode: '200'
     TargetGroupAttributes:
     - Key: deregistration_delay.timeout_seconds
       Value: '10'
     - Key: stickiness.enabled
       Value: true
     - Key: stickiness.lb_cookie.duration_seconds
       Value: 180
     VpcId: !Ref VpcId
  TargetGroupFormats:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
     Name: !Sub
      - TG-methode-formats-${App}-${Env}
      - { App: !Ref MethodeApp, Env: !FindInMap [ EnvMap, !Ref TagEnvironment, env ] }
     Port: 8080
     Protocol: HTTP
     HealthCheckPath: /emcreateformats/
     HealthCheckProtocol: HTTP
     HealthCheckIntervalSeconds: 10
     HealthCheckTimeoutSeconds: 5
     HealthyThresholdCount: 2
     UnhealthyThresholdCount: 5
     Matcher:
       HttpCode: '200'
     TargetGroupAttributes:
     - Key: deregistration_delay.timeout_seconds
       Value: '10'
     - Key: stickiness.enabled
       Value: true
     VpcId: !Ref VpcId
  TargetGroupWebClient:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
     Name: !Sub
      - TG-methode-wclient-${App}-${Env}
      - { App: !Ref MethodeApp, Env: !FindInMap [ EnvMap, !Ref TagEnvironment, env ] }
     Port: 8080
     Protocol: HTTP
     HealthCheckPath: /webclient/WebClientCtx/jsp/commons/system/browsercheck.jsp
     HealthCheckProtocol: HTTP
     HealthCheckIntervalSeconds: 10
     HealthCheckTimeoutSeconds: 5
     HealthyThresholdCount: 2
     UnhealthyThresholdCount: 5
     Matcher:
       HttpCode: '200'
     TargetGroupAttributes:
     - Key: deregistration_delay.timeout_seconds
       Value: '10'
     - Key: stickiness.enabled
       Value: true
     VpcId: !Ref VpcId
  TargetGroupMfm:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
     Name: !Sub
      - TG-methode-mfm-${App}-${Env}
      - { App: !Ref MethodeApp, Env: !FindInMap [ EnvMap, !Ref TagEnvironment, env ] }
     Port: 8080
     Protocol: HTTP
     HealthCheckPath: /mfm/
     HealthCheckProtocol: HTTP
     HealthCheckIntervalSeconds: 10
     HealthCheckTimeoutSeconds: 5
     HealthyThresholdCount: 2
     UnhealthyThresholdCount: 2
     Matcher:
       HttpCode: '200'
     TargetGroupAttributes:
     - Key: deregistration_delay.timeout_seconds
       Value: '10'
     - Key: stickiness.enabled
       Value: true
     VpcId: !Ref VpcId
  ListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroupPreview
      LoadBalancerArn:
        Ref: ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
  ListenerRuleMIS:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroupMIS
      Conditions:
      - Field: path-pattern
        Values:
        - "/mis/*"
      ListenerArn:
        Ref: ListenerHTTP
      Priority: 10
  ListenerRuleRhelper:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroupRhelper
      Conditions:
      - Field: path-pattern
        Values:
        - "/rhelper*"
      ListenerArn:
        Ref: ListenerHTTP
      Priority: 20
  ListenerRuleCheckin:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroupCheckin
      Conditions:
      - Field: path-pattern
        Values:
        - "/emcheckin*"
      ListenerArn:
        Ref: ListenerHTTP
      Priority: 30
  ListenerRulePreview:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroupPreview
      Conditions:
      - Field: path-pattern
        Values:
        - "/preview*"
      ListenerArn:
        Ref: ListenerHTTP
      Priority: 40
  ListenerRuleFormats:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroupFormats
      Conditions:
      - Field: path-pattern
        Values:
        - "/emcreateformats*"
      ListenerArn:
        Ref: ListenerHTTP
      Priority: 50
  ListenerRuleWebClient:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroupWebClient
      Conditions:
      - Field: path-pattern
        Values:
        - "/webclient*"
      ListenerArn:
        Ref: ListenerHTTP
      Priority: 60
  ListenerRuleMfm:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: TargetGroupMmf
      Conditions:
      - Field: path-pattern
        Values:
        - "/mfm/*"
      ListenerArn:
        Ref: ListenerHTTP
      Priority: 70   
Outputs:
  LoadBalancerDNSName:
    Description: Load Balancer DNS Name
    Value: !GetAtt ApplicationLoadBalancer.DNSName
